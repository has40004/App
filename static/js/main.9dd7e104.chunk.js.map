{"version":3,"sources":["companents/app-header/app-header.js","companents/app-header/index.js","companents/search-panel/index.js","companents/search-panel/search-panel.js","companents/post-ststus-filter/index.js","companents/post-ststus-filter/post-status-filter.js","companents/post-list-item/index.js","companents/post-list-item/post-list-item.js","companents/post-list/index.js","companents/post-list/post-list.js","companents/post-add-form/post-add-form.js","companents/post-add-form/index.js","companents/app/app.js","companents/app/index.js","index.js"],"names":["AppHeader","liked","allPosts","className","SearchPanel","props","state","term","onUpdateSearch","bind","e","target","value","this","setState","type","placeholder","onChange","Component","PostStatusFilter","buttons","name","label","map","item","clazz","filter","onClick","onFilterSelect","PostListItem","onDelete","onToggleImportant","onToggleLike","important","classNames","like","PostList","suca","elements","id","ListGroup","PostAddForm","text","onValueChange","onSubmit","preventDefault","onAdd","AppBlock","styled","div","App","data","deleteItem","addItem","index","findIndex","elem","before","slice","after","body","newItem","Math","random","old","items","length","indexOf","visiblePosts","filterPost","searchPost","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9dd7e104.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst AppHeader = ({liked, allPosts}) => {\r\n    return (\r\n        <div className=\"app-header d-flex\" >\r\n            <h1> Hassan Al-samman</h1>\r\n            <h2> {allPosts} записей, из них понравилось {liked}</h2>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AppHeader;","import AppHeader from './app-header';\r\nimport './app-header.css';\r\n\r\nexport default AppHeader;","import SearchPanel from './search-panel';\r\n\r\nexport default SearchPanel;","import React, { Component } from 'react';\r\nimport './search-panel.css';\r\n\r\n\r\nexport default class SearchPanel extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            term : ''\r\n        }\r\n        this.onUpdateSearch = this.onUpdateSearch.bind(this); // привязываем наш обрабочик события \r\n    }\r\n\r\n    onUpdateSearch (e) {\r\n        const term = e.target.value ;\r\n        this.setState ({term}); // записываем переменую term в наш state в свойстве term  \r\n        this.props.onUpdateSearch(term); // это функция не является функция onUpdateSearch  в этом компонентеБ мы будем ее писать в наш главном компоненте App\r\n        //  поэтому мы молучили ее с props \r\n       \r\n    }\r\n  render(){\r\n    return (\r\n        <input\r\n            className=\"form-control search-input\"\r\n            type=\"text\"\r\n            placeholder=\"поиск по записам\"\r\n            onChange={this.onUpdateSearch} // это функция будет следить на то что вводит пользователь и изменять наш state \r\n        />\r\n    )\r\n  }\r\n}\r\n","import PostStatusFilter from './post-status-filter';\r\n\r\nexport default PostStatusFilter;","import React, { Component } from 'react';\r\nimport './post-status-filter.css';\r\n\r\nexport default class PostStatusFilter extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.buttons =[\r\n            {name:'all', label:'Все'},\r\n            {name:'like', label:'Понравилось'}\r\n\r\n        ]\r\n    }\r\n    render(){\r\n        const buttons = this.buttons.map((item) => {\r\n            const active = this.props.filter === item.name;\r\n            const clazz = active ? ' btn-info': 'btn-outline-secondary';\r\n            return (\r\n                <button \r\n                 key ={item.name} \r\n                 type='button' \r\n                 className={ `btn ${clazz}`} \r\n                 onClick={() => this.props.onFilterSelect(item.name)}\r\n                 >{item.label} </button>\r\n            )\r\n        });\r\n        return (\r\n            <div className=\"btn-group\">\r\n                {buttons}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n","import PostListItem from './post-list-item';\r\n\r\nexport default PostListItem;","import React, {Component} from 'react';\r\n\r\nimport './post-list-item.sass';\r\nexport default class PostListItem extends Component {\r\n\r\n    render() {\r\n        const {label, onDelete, onToggleImportant, onToggleLike, important, like} = this.props;\r\n        \r\n        let classNames = 'app-list-item d-flex justify-content-between';\r\n\r\n        if (like) {\r\n            classNames +=' like'\r\n        }\r\n\r\n        if (important) {\r\n            classNames +=' important'\r\n        }\r\n        \r\n        return (\r\n            <div className={classNames}>\r\n                <span  \r\n                className=\"app-list-item-label\"\r\n                onClick={onToggleLike}>\r\n                    {label}\r\n                </span>\r\n                <div className=\"d-flex justify-content-center align-items-center\">\r\n                    <button \r\n                    type=\"button\" \r\n                    className=\"btn-star btn-sm\"\r\n                    onClick={onToggleImportant}>\r\n                        <i className=\"fa fa-star\"></i>\r\n                    </button>\r\n                    <button \r\n                        type=\"button\" \r\n                        className=\"btn-trash btn-sm\" \r\n                        onClick={onDelete}>\r\n                        <i className=\"fa fa-trash-o\"></i>\r\n                    </button>\r\n                    <i className=\"fa fa-heart\"></i>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n","import PostList from './post-list';\r\n\r\nexport default PostList;","import React from 'react';\r\nimport PostListItem from '../post-list-item';\r\nimport './post-list.css';\r\nimport { ListGroup } from 'reactstrap';\r\nconst PostList = ({suca, onDelete, onToggleImportant, onToggleLike}) =>{\r\n\r\n    const elements = suca.map((item) => {\r\n        return (\r\n            <li key ={item.id} className=\"list-group-item\">\r\n                <PostListItem \r\n                label= {item.label} \r\n                important = {item.important}\r\n                like = {item.like} \r\n                onDelete = { () => onDelete(item.id)} \r\n                onToggleImportant={ () => onToggleImportant(item.id)}\r\n                onToggleLike = { () => onToggleLike(item.id)} />\r\n            </li>\r\n        )\r\n    });\r\n    return (\r\n        <ListGroup className=\" app-list \">\r\n           {elements}\r\n        </ListGroup>\r\n    )\r\n}\r\n\r\nexport default PostList;","import React, {Component} from 'react';\r\n\r\nexport default class PostAddForm extends Component {\r\n    constructor (props){\r\n        super(props);\r\n        this.state = {\r\n            text: ''\r\n        }\r\n    \r\n        this.onValueChange = this.onValueChange.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n    }\r\n    onValueChange (e) {\r\n        this.setState ( {\r\n            text: e.target.value\r\n        })\r\n        \r\n    }\r\n\r\n    onSubmit(e) {\r\n        e.preventDefault();\r\n        this.props.onAdd(this.state.text);\r\n        this.setState ({\r\n            text: ''\r\n        })\r\n    }\r\n\r\n    \r\n    render(){\r\n        return (\r\n            <form \r\n                className=\"bottom-panel d-flex\"\r\n                onSubmit={this.onSubmit} >\r\n                <input \r\n                    type=\"text\"\r\n                    className=\"form-control new-post-label\"\r\n                    placeholder=\"о чем вы думаете сейчас?\"\r\n                    onChange={this.onValueChange} \r\n                    value={this.state.text} \r\n                />\r\n                <button \r\n                    type=\"submit\"\r\n                    className=\" btn btn-outline-secondary\"> \r\n                    добавить \r\n                </button>\r\n    \r\n            </form>\r\n        )\r\n    }\r\n  \r\n}\r\n","import PostAddForm from './post-add-form';\r\n\r\nimport './post-add-form.css';\r\nexport default PostAddForm;","import React, {Component} from 'react';\r\n\r\nimport AppHeader from '../app-header';\r\nimport SearchPanel from '../search-panel';\r\nimport PostStatusFilter from '../post-ststus-filter';\r\nimport PostList from '../post-list';\r\nimport PostAddForm from '../post-add-form';\r\nimport './app.css';\r\nimport styled from 'styled-components';\r\nconst AppBlock = styled.div`\r\n    margin: 0 auto;\r\n    max-width: 800px;\r\n\r\n`\r\nexport default class App extends Component  {\r\n    constructor (props){\r\n        super(props);\r\n        this.state = {\r\n            data : [\r\n                {label: \"Going to learn React\", important: false, like: false, id: 1},\r\n                {label: \"That is so goo\", important: false, like: false, id : 2},\r\n                {label: \"I need a break...\", important: false, like: false, id: 3 }\r\n            ],\r\n            term : '',\r\n            filter : 'all'\r\n        }\r\n        this.deleteItem = this.deleteItem.bind(this);\r\n        this.addItem = this.addItem.bind(this);\r\n        this.onToggleImportant = this.onToggleImportant.bind(this);\r\n        this.onToggleLike = this.onToggleLike.bind(this);\r\n        this.onUpdateSearch = this.onUpdateSearch.bind(this);\r\n        this.onFilterSelect = this.onFilterSelect.bind(this);\r\n\r\n\r\n\r\n    }\r\n\r\n    deleteItem (id) {\r\n        this.setState( ({data}) => {\r\n            const index = data.findIndex( elem => elem.id === id); // здесь мы находим нужный id и его index \r\n            const before = data.slice (0,index); //здесь мы берем массив и убираем все элементы кроме тех кто до элемента с индексом (index) \r\n            const after = data.slice( index +1 ); // здесь мы убираем все элементы которые будут после выбраного элемента если index = 1 то будет элементы с индексом 2 и 3 и тд\r\n            const newArr = [...before, ...after]; //  тут мы собираем оба масива в один используя spread \r\n            return {\r\n                data : newArr // возврашаем новый массив с новыми данными\r\n            }\r\n        });\r\n    }\r\n\r\n    addItem(body) {\r\n        const newItem= {\r\n            label : body,\r\n            important : false,\r\n            id : Math.random()\r\n        }\r\n        \r\n         this.setState (({data}) => {\r\n             const newArr = [...data, newItem];\r\n             return {\r\n                 data : newArr\r\n             }\r\n         })\r\n    }\r\n\r\n    onToggleImportant (id) {\r\n        this.setState ( ({data}) => {\r\n            const index = data.findIndex( elem => elem.id === id);\r\n            const old = data[index];\r\n            const newItem = {...old, important: !old.important};\r\n            const newArr = [...data.slice (0,index), newItem, ...data.slice( index +1 )];\r\n            return {\r\n                data: newArr\r\n            }\r\n        })\r\n    }\r\n    onToggleLike (id) {\r\n        this.setState ( ({data}) => {\r\n            const index = data.findIndex( elem => elem.id === id);\r\n            const old = data[index];\r\n            const newItem = {...old, like: !old.like};\r\n            const newArr = [...data.slice (0,index), newItem, ...data.slice( index +1 )];\r\n            return {\r\n                data: newArr\r\n            }\r\n        })\r\n    }\r\n\r\n    searchPost(items, term) { // функци будет принимать два аргумента, данные (items = data) и то что ввел пользователь (term)\r\n        if (term.length === 0){ // проверяем если пользователь ввел что то или нетБ если нет то вернем даннные (data)\r\n            return items;\r\n        }\r\n        \r\n\r\n        return items.filter( (item) => { // возврашаем элемнты и фильтруем их \r\n            return item.label.indexOf(term) > -1 ; // filter возврашает нам новый массивб и в каждом элементе массива убдем находить свойство \r\n            // label  внутри которго будем находить то что ввел пользоватль, Метод indexOf( searchOf) \r\n            // возвращает индекс первого вхождения указанного значения в строковый объект String, на котором он был вызван\r\n            //(searchOf) Строка, представляющая искомое значение. если знчение не найдено он возворшает -1 \r\n            \r\n        });\r\n    }\r\n    filterPost(items, filter) {\r\n        if ( filter === 'like'){// если филт будет по лайкам то: \r\n            return items.filter(item => item.like)// фильтируем элементы и берем те элементы у которых свойство like  будет равно true \r\n            // перебираем каждый элмент массив и сравниваем свойство like  если будет true берем все элемнты с этом значением и строим массив \r\n        }else { //  а если наш филтер будет что то другое в ншем случае юудет фильтр all то: \r\n            return items ; // будем возврашать все элементы \r\n\r\n        }\r\n    }\r\n    \r\n\r\n    onUpdateSearch (term) { // простая функция которая будет обнавлять наш state \r\n        this.setState({term});\r\n\r\n    }\r\n    onFilterSelect(filter){\r\n        this.setState({filter});\r\n    }\r\n\r\n    render() {\r\n        const {data, term, filter} = this.state; // полчаем все переменные из нашего state \r\n        const liked = data.filter( item => item.like).length;\r\n        const allPosts = data.length;\r\n        const visiblePosts = this.filterPost(this.searchPost(data, term), filter); // здесь создаем переменную ы которой будт записан новый массив с функции searchPost\r\n        // с филтреом будем показывать только фильтировнные элементы  изменим const visiblePosts = this.searchPost(data, term); но то что показано\r\n        // функция filterPosts принимает два аргумента, перый это массив данных который будет наша функция которая возврашает данные с панель поиска\r\n        // второй аргумент будет тот фильтрировный элемент \r\n        return (\r\n            <AppBlock>\r\n                <AppHeader\r\n                liked={liked}\r\n                allPosts={allPosts} />\r\n                <div className=\"search-panel d-flex\">\r\n                    <SearchPanel \r\n                        onUpdateSearch={this.onUpdateSearch}\r\n                        />\r\n                    <PostStatusFilter\r\n                        filter={filter}\r\n                        onFilterSelect={this.onFilterSelect}\r\n                    />\r\n                </div>\r\n                <PostList \r\n                suca = { visiblePosts} // теперь мы не будем брать все данныеБ а именно те которые хотим отобразить на странице \r\n                onDelete ={this.deleteItem} \r\n                onToggleImportant={this.onToggleImportant}\r\n                onToggleLike={this.onToggleLike} />\r\n                <PostAddForm \r\n                onAdd ={this.addItem} />\r\n            </AppBlock>\r\n        )\r\n    }\r\n}\r\n\r\n","import App from './app';\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './companents/app/';\n\n\n\nReactDOM.render( <App/>, document.getElementById('root'));\n\n"],"sourceRoot":""}